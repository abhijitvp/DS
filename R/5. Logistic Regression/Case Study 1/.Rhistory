getMode = function(x){
u = unique(x)
# match(u,x)
u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
getMode = function(x){
u = unique(x)
# match(u,x)
tabulate(match(x, u))
#u[which.max(tabulate(match(x, u)))]
}
getMode(x)
tabulate(x)
#match:  Find vector in other vector
#it gives exact postion of the element in other vector
x=c("k","j","1","$","f")
#tabulate
x=c("a","b","c","a","a","a","c")
tabulate(x)
#tabulate
x=c("a","b","c","a","a","a","c")
tabulate(x)
getMode = function(x){
u = unique(x)
# match(u,x)
tabulate(match(x, u))
#u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
set.seed(2)
x=sample(letters[1:5],50,replace=T)
y=sample(letters[1:3],50,replace=T)
x
y
getMode = function(x){
u = unique(x)
# match(u,x)
tabulate(match(x, u))
#u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
which.max[tabulate(match(x, u))]
getMode = function(x){
u = unique(x)
# match(u,x)
tabulate(match(x, u))
which.max[tabulate(match(x, u))]
#u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
getMode = function(x){
u = unique(x)
# match(u,x)
max(tabulate(match(x, u)))
#u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
getMode = function(x){
u = unique(x)
# match(u,x)
tabulate(match(x, u))
max(tabulate(match(x, u)))
#u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
getMode = function(x){
u = unique(x)
# match(u,x)
# tabulate(match(x, u))
# max(tabulate(match(x, u)))
u[which.max(tabulate(match(x, u)))]
}
getMode(x)
getMode(y)
#ifelse
a <- 1:100
ifelse(a %% 2 == 0, "Even", "Odd")
n=100000
myvec=sample(1:10, n*9, TRUE)
X = as.data.frame(matrix(myvec, n, 9))
x
head(X)
dayloop2 = function(temp){
for (i in 1:nrow(temp)){
if (i > 1) {
if ((temp[i,6] == temp[i-1,6]) & (temp[i,3] == temp[i-1,3])) {
temp[i,10] = temp[i,9] + temp[i-1,10]
}
else {
temp[i,10] = temp[i,9]
}
}
else {
temp[i,10] = temp[i,9]
}
}
return(temp)
}
(t1=system.time(dayloop2(X)))
dayloop2_A = function(temp){
res = numeric(nrow(temp))
for (i in 1:nrow(temp)){
if (i > 1) {
if ((temp[i,6] == temp[i-1,6]) & (temp[i,3] == temp[i-1,3])) {
res[i] = temp[i,9] + res[i-1]
} else {
res[i] = temp[i,9]
}
38
} else {
res[i] = temp[i,9]
}
}
temp$V10 = res
return(temp)
}
(t2=system.time(dayloop2_A(X)))
dayloop2_B = function(temp){
# Using the idea explained above to do comparsion without using for loop. the result
# is stored in vector cond.
cond = c(FALSE, (temp[-nrow(temp),6] == temp[-1,6]) &
(temp[-nrow(temp),3] == temp[-1,3]))
# along with that we are also getting rid of assigning values of res to temp[,9]
# when condition is not true. Instead of that , from the very beginning we are
# assigning it equal to temp[,9]. We
res = temp[,9]
for (i in 1:nrow(temp)) {
if (cond[i]) {res[i] = temp[i,9] + res[i-1]}
}
temp$new = res
return(temp)
}
(t3=system.time(dayloop2_B(X)))
#here each parameter does not come in intellicence. But you can go to definition of function and find out
#111222333
a=rep(1:3,each=3)
a
#tabulate : need to find out
x=c("a","b","c","a","a","a","c")
table(x)
y=c("abc","bcd","pqr","tuv")
sort(y)
y=c("abc","xyz", "bcd","pqr","tuv")
sort(y)
y=c("abc","xyz", "bcd","pqr","tuv")
sort(y)
y=c("abc","xyz", "bcd","pqr","tuv")
sort(y)
#sampling
x=1:100
sample(x,3)
set.seed(1) #
sample(x,3)
sample(x,3)
set.seed(1) #
sample(x,3)
set.seed(1) #
sample(letters,3)
#unique
x=sample(1:10,20,replace=T)
unique(x)
#List
x=1:10
y=rep(c("a","b"),each=6)
z=4.56
list1=list(x,y,z)
list1
#List
x=1:10
y=rep(c("a","b"),each=6)
z=4.56
list1=list(x,y,z)
list1
list1[[1]]
list1[[1]][3]
list[[2]]
#List
x=1:10
y=rep(c("a","b"),each=6)
z=4.56
list1=list(x,y,z)
list1
list1[[1]]
list1[[1]][3]
list[[2]]
y
list[[2]][1]
list[[3]]
list1[[3]]
list1[[2]]
list1[[2]][4]
list[[3]]
list1[[3]]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
if("car" %in% rownames(installed.packages()) == FALSE) {
install.packages("car")
}
library(car)
#check loaded data
str(ld)
#-----------------------------------------------------------
# STEP 2
# Read the file
# You must read file as stringsAsFactors = FALSE
ld = read.csv("loans data.csv", stringsAsFactors = FALSE)
#check loaded data
str(ld)
#dplyr has glimps function similar to str for checking structure
glimpse(ld)
#use below package
library(dplyr)
#dplyr has glimps function similar to str for checking structure
glimpse(ld)
#View the columns what values it consists
table(ld$Amount.Requested) #here you can see 4 number of dots.
#check data and datatype now
table(ld$Amount.Requested)
glimpse(ld)
#View the columns what values it consists
table(ld$Amount.Requested) #here you can see 4 number of dots.
#make it numeric
ld$Amount.Requested = as.numeric(ld$Amount.Requested)
#check data and datatype now
table(ld$Amount.Requested)
glimpse(ld)
table(ld$Amount.Funded.By.Investors)
table(ld$Interest.Rate)
table(ld$Debt.To.Income.Ratio)
table(ld$Monthly.Income)
table(ld$Open.CREDIT.Lines)
table(ld$Revolving.CREDIT.Balance)
table(ld$Loan.Length)
#other way
ld = ld %>% mutate(Amount.Funded.By.Investors = as.numeric(Amount.Funded.By.Investors),
Interest.Rate = as.numeric(gsub("%","",Interest.Rate)),
Debt.To.Income.Ratio = as.numeric(gsub("%","",Debt.To.Income.Ratio)),
Monthly.Income = as.numeric(Monthly.Income),
Open.CREDIT.Lines = as.numeric(Open.CREDIT.Lines),
Revolving.CREDIT.Balance = as.numeric(Revolving.CREDIT.Balance)
)
table(ld$Amount.Funded.By.Investors)
table(ld$Interest.Rate)
table(ld$Debt.To.Income.Ratio)
table(ld$Monthly.Income)
table(ld$Open.CREDIT.Lines)
table(ld$Revolving.CREDIT.Balance)
table(ld$Loan.Length)
#STEP 4 : character cleaning
# if the data availble now will not be avaible in future then there is no point keeping  data
# here Amount funded by investor data may not be avaible on real data as being sensitive.
# Hence we are removing it
ld %>% select(-Amount.Funded.By.Investors)
glimpse(ld)
#FICO.Range has value like 735-739
# We will take avg instead of range
table(ld$FICO.Range)
ld = ld %>% mutate(f1 = as.numeric(substr(FICO.Range,1,3)),
f2 = as.numeric(substr(FICO.Range,5,7)),
FICO = 0.5*(f1+f2)
) %>%
select(-FICO.Range, -f1, -f2)
glimpse(ld)
#FICO.Range has value like 735-739
# We will take avg instead of range
table(ld$FICO.Range)
table(ld$FICO)
#Employee Length column
# see values
table(ld$Employment.Length)
ld <- ld %>% mutate(
el = gsub("<", "", Employment.Length),
el = gsub("\\+", "", el),
el = gsub(" ", "", el),
el = gsub("years", "", el),
el = gsub("year", "", el),
el = as.numeric(el)
) %>%
select(- Employment.Length
)
table (ld$Employment.Length)
table (ld$el)
ld = ld %>%
mutate(HW_RENT = as.numeric(Home.Ownership == "RENT"),
HW_MORT = as.numeric(Home.Ownership == "MORTGAGE"),
HW_OWN = as.numeric(Home.Ownership == "OWN")
) %>%
select(-Home.Ownership)
glimpse(ld)
# Loan Purpose
table(ld$Loan.Purpose)
ld = ld %>%
mutate(
LP_DC = as.numeric(Loan.Purpose == "debt_consolidation"),
LP_CC = as.numeric(Loan.Purpose == "credit_card"),
LP_OTHER = as.numeric(Loan.Purpose == "other")
)%>%
select(-Loan.Purpose)
glimpse(ld)
ld = ld %>%
mutate(
LL_36 = as.numeric(Loan.Length == "36 months")
)%>%
select(-Loan.Length)
glimpse(ld)
#state
table(ld$State)
ld = ld %>% select (-State)
set.seed(2)
s=sample(1:nrow(ld), 0.7*nrow(ld))
ld_trainval = ld[s,]
ld_test = ld[-s,]
s1=sample(1:nrow(ld_trainval), 0.7*nrow(ld_trainval))
ld_train = ld[s1,]
ld_val = ld[-s1,]
glimpse(ld)
glimpse(ld_train)
# Step 6 : Create model
fit = lm(Interest.Rate~. -ID, data = ld_train)
library(car) #vif is in car
sort(vif(fit))
#dplyr has glimps function similar to str for checking structure
glimpse(ld)
----------------------------------------------
#Packages Needed
#dplyr
#car
#Install if not exists
if("dplyr" %in% rownames(installed.packages()) == FALSE) {
install.packages("dplyr")
}
----------------------------------------------
#Packages Needed
#dplyr
#car
#Install if not exists
if("dplyr" %in% rownames(installed.packages()) == FALSE) {
install.packages("dplyr")
}
----------------------------------------------
# Step 1: set working dir
# setwd("D:/Abhijit/WK/Study/Data Science/Logistic Regression")
# getwd()
#better way to set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
----------------------------------------------
# Step 1: set working dir
# setwd("D:/Abhijit/WK/Study/Data Science/Logistic Regression")
# getwd()
#better way to set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
----------------------------------------------
# Step 1: set working dir
# setwd("D:/Abhijit/WK/Study/Data Science/Logistic Regression")
# getwd()
#better way to set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rg=read.csv("Existing Base.csv",stringsAsFactors = FALSE)
getwd()
library(dplyr)
glimpse(rg)
----------------------------------------------
#step 2 : Data Cleaning
table(rg$children)
rg = rg %>%
mutate(children=ifelse(children=="Zero",0,substr(children,1,1)),
children=as.numeric(children))
glimpse(rg)
----------------------------------------------
#step 2 : Data Cleaning
table(rg$children)
#now age_band columns
table(rg$age_band)
round(prop.table(table(rg$age_band,rg$Revenue.Grid),1),4)
rg=rg %>%
mutate(a1=as.numeric(substr(age_band,1,2)),
a2=as.numeric(substr(age_band,4,5)),
age=ifelse(substr(age_band,1,2)=="71",71,ifelse(age_band=="Unknown",NA,0.5*(a1+a2)))
)
glimpse(rg)
table(rg$age)
#now status
rg = rg %>%
mutate(status_div=as.numeric(status=="Divorced/Separated"),
status_partner=as.numeric(status=="Partner"),
status_single=as.numeric(status=="Single/Never Married")) %>%
select(-status)
glimpse(rg)
#occupation
table(rg$occupation)
round(prop.table(table(rg$occupation,rg$Revenue.Grid),1),2)
rg=rg %>%
mutate(occ_BM_prof=as.numeric(occupation %in% c("Business Manager","Professional")),
occ_Retired=as.numeric(occupation=="Retired"),
occ_HW=as.numeric(occupation=="Housewife")) %>%
select(-occupation)
glimpse(rg)
rg=rg %>%
mutate(op_1=as.numeric(occupation_partner %in% c("Other","Retired","Unknown")),
op_2=as.numeric(occupation_partner %in% c("Student","Secretarial/Admin"))) %>%
select(-occupation_partner)
glimpse(rg)
#home status
table(rg$home_status)
#make 4 categories
#to copy paste the values use unique
unique(rg$home_status)
rg=rg %>%
mutate(hs_livein=as.numeric(home_status=="Live in Parental Hom"),
hs_own=as.numeric(home_status=="Own Home"),
hs_rent_private=as.numeric(home_status=="Rent Privately"),
hs_rent_council=as.numeric(home_status=="Rent from Council/HA")) %>%
select(-home_status)
glimpse(rg)
#Family Income
table(rg$family_income)
round(prop.table(table(rg$family_income,rg$Revenue.Grid),1),2)
rg=rg %>%
mutate(fi_1=as.numeric(family_income %in%
c("< 4,000","< 8,000, >= 4,000")),
fi_2=as.numeric(family_income %in%
c("<12,500, >=10,000","<25,000, >=22,500","<27,500, >=25,000")),
fi_3=as.numeric(family_income %in%
c("<10,000, >= 8,000","<15,000, >=12,500","<20,000, >=17,500",">=35,000")),
fi_4=as.numeric(family_income %in%
c("<17,500, >=15,000","<22,500, >=20,000","<30,000, >=27,500"))
) %>%
select(-family_income)
glimpse(rg)
#self_emplpoyed
table(rg$self_employed)
table(rg$self_employed_partner)
table(rg$gender)
rg=rg %>%
mutate(self_emp_yes=as.numeric(self_employed=="Yes"),
self_emp_part_yes=as.numeric(self_employed_partner=="Yes"),
gender_f=as.numeric(gender=="Female"),
gender_m=as.numeric(gender=="Male")) %>%
select(-self_employed,-self_employed_partner,-gender)
glimpse(rg)
table(rg$TVarea)
table(rg$post_code)
table(rg$post_area)
table(rg$region)
rg=rg %>%
select(-TVarea,-post_code,-post_area,-region)
glimpse(rg)
rg=rg %>% filter(!(year_last_moved==0))
glimpse(rg)
#--------------------
# Step 3: Sampling
set.seed(2)
s=sample(1:nrow(rg),0.7*nrow(rg))
rg_trainval=rg[s,]
rg_test=rg[-s,]
s1=sample(1:nrow(rg_trainval),0.7*nrow(rg_trainval))
rg_train=rg_trainval[s1,]
rg_val=rg_trainval[-s1,]
# Step 4 : Create Model
# Remove columns one by one using vif
library(car)
for_vif=lm(Revenue.Grid~.-REF_NO,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity-Investment.in.Derivative ,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity-Investment.in.Derivative
-Investment.in.Equity,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity-Investment.in.Derivative
-Investment.in.Equity-gender_m,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity-Investment.in.Derivative
-Investment.in.Equity-gender_m-hs_own,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity-Investment.in.Derivative
-Investment.in.Equity-gender_m-hs_own-fi_3,data=rg_train)
sort(vif(for_vif))
for_vif=lm(Revenue.Grid~.-REF_NO-Investment.in.Commudity-Investment.in.Derivative
-Investment.in.Equity-gender_m-hs_own-fi_3-Portfolio.Balance,data=rg_train)
sort(vif(for_vif))
summary(for_vif)
rg_fit=rg_train %>%
select(-REF_NO,-Investment.in.Commudity,-Investment.in.Derivative,
-Investment.in.Equity,-gender_m,-hs_own,-fi_3,-Portfolio.Balance)
summary(for_vif)
# setwd("/Users/gobo/Desktop/Data Science/Govinda Training/Govinda Training/Logistic Regression/Case Study 1")
# getwd()
#better way to set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
----------------------------------------------
#Since the problem statement has not been stated
#better way to set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
ds1 <- read.csv("ds1.csv", stringsAsFactors = F)
ds2 <- read.csv("ds2.csv", stringsAsFactors = F)
ds3 <- read.csv("ds3.csv", stringsAsFactors = F)
ds4 <- read.csv("ds4.csv", stringsAsFactors = F)
glimpse(ds1)
data.temp.set <- as.data.frame(rbind(ds1, ds2, ds3))
